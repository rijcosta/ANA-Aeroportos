sap.ui.define([
	"sap/ui/core/mvc/Controller",
	"../js/vendor/ocrad.min",
	"../js/vendor/jquery.Jcrop",
	"../js/vendor/quagga.min",
	"../js/vendor/tesseract",
	"sap/m/MessageToast"
], function(Controller, MessageToast) {
	"use strict";
	return Controller.extend("Milestone_OCR.controller.View1", {
		/**
		 *@memberOf Milestone_OCR.controller.View1
		 */
		config: {
			"default": {
				inputStream: {
					name: "image/process.png",
					type: "ImageStream",
					src: "",
					length: 10,
					size: 800
				},
				locator: {
					patchSize: "medium",
					halfSample: true
				}
			},
			"i2of5_reader": {
				inputStream: {
					size: 800,
					type: "ImageStream",
					length: 5
				},
				locator: {
					patchSize: "small",
					halfSample: false
				}
			}
		},

		onInit: function() {

			jQuery(function() {

				jQuery("#__image0").Jcrop({
					onRelease: function() {
						this.MessageToast.show("result");

					},

					trackDocument: true

				});
			});

		},


on:function(){
	

},

		//This code was generated by the layout editor.
		// var  ocrad = new  Milestone_OCR.;
		/*var c = document.getElementById('__xmlview0--myCanvas');
				 	var ctx = canvas.getContext("2d");
				 	ctx.drawImage(step2Image,0,0);
				 	this.getView().byId("__area0").value  = OCRAD(ctx);
			//	 	var string = OCRAD(step2Image);*/
		//	this.getView().byId("__area0").value = string;
		//  Tesseract.recognize(step2Image).then(function(result){
		//    MessageToast.show(result)
		//});
		//	   var cropData = step2Image.Jcrop.tellSelect();			  
		// When zoomed out to less than 100%, for some very strange reason,
		// some browsers report devicePixelRatio as less than 1
		// and only part of the canvas is cleared then.
		//			html.setContent("<canvas id='OCRArea' width='800' height='400'/>    ");  
		//   var canvas = this.getView().byId("OCRArea");
		/*
		var ch;
		var cw;
		//var canvas = document.getElementById("OCRArea");
		var ctx = canvas.getContext("2d");
		var imgData ;

		cw = canvas.width;
		ch = canvas.height;

		ctx.fillStyle = "rgb(255, 255, 255)";
		ctx.fillRect(0, 0, cw, ch);
		ctx.fillStyle = "rgb(0, 0, 0)";

		ctx.font="100px Georgia";
		ctx.fillText("Test!",10,100);

		imgData = ctx.getImageData(0, 0, cw, ch);*/
		//this.getView().byId("__area0").value = OCRAD(step2Image);
		/*        var scale = 33;

		       
		        canvas.width = 12 * scale;
		        canvas.height = 12 * scale;

		        var ctx = canvas.getContext('2d');
		        ctx.drawImage(
		            step2Image,
		            12 * scale,
		            12 * scale,
		            12 * scale,
		            12 * scale,
		            0,
		            0,
		            12 * scale,
		            12 * scale);*/
		//var cropData =  step2Image.data().Jcrop.tellSelect();
		//draw cropped image on the canvas
		/*
		     var string = OCRAD(ctx);
		    	this.getView().byId("__area0").value = string; */
		/**
		 *@memberOf Milestone_OCR.controller.View1
		 */
		ocr: function() {
			//	this.getView().byId("__area0").value = "RECON";
			var step2Image = document.getElementById("__image0");
			var cropData = $(step2Image).data().Jcrop.tellSelect();
			var scale = step2Image.width / $(step2Image).width();
			//		var canvas = this.getView().byId("myCanvas");
			var canvas = document.getElementById("myCanvas");
			//canvas.width = cropData.w * scale;
			//canvas.height = cropData.h * scale;

			canvas.width = step2Image.width;
			canvas.height = step2Image.height;
			var ctx = canvas.getContext("2d");
			/*			ctx.drawImage(step2Image, (cropData.x - 50) * scale, cropData.y * scale, (cropData.w + 100) * scale, cropData.h * scale, 0, 0,
							cropData.w * scale,
							cropData.h * scale);*/
			var x = cropData.x;
			var y = cropData.y;
			var w = cropData.w;
			var h = cropData.h;
			//	ctx.drawImage(step2Image, x, y, w, h, 0, 0, cropData.w, cropData.h);

			ctx.drawImage(step2Image, 0, 0, step2Image.width, step2Image.height, 0, 0, step2Image.width, step2Image.height);

			jQuery(function() {
				jQuery("#myCanvas").Jcrop({
					trackDocument: false
				});

			});

			//	ctx.drawImage(step2Image, 10, 10);
			/*	var imgW = canvas.width * scale;
				var imgH = canvas.height * scale;
				var imgPixels = ctx.getImageData(0, 0, imgW, imgH);
				for (var y = 0; y < imgPixels.height; y++) {
					for (var x = 0; x < imgPixels.width; x++) {
						var i = y * 4 * imgPixels.width + x * 4;
						var avg = (imgPixels.data[i] + imgPixels.data[i + 1] + imgPixels.data[i + 2]) / 3;
						imgPixels.data[i] = avg;
						imgPixels.data[i + 1] = avg;
						imgPixels.data[i + 2] = avg;
					}
				}
				ctx.putImageData(imgPixels, 0, 0, 0, 0, imgPixels.width, imgPixels.height);*/
			var oInput = this.getView().byId("__area0");
			oInput.setValue(OCRAD(ctx));
			var oInput2 = document.getElementById("ocr");

	//		oInput2.value = (OCRAD(ctx));

			//var config =   this.config.default;
			//         config = $.extend(true, {}, config, this.state);
			//         Quagga.init(config, function() {
			//       //      App.attachListeners();
			//             Quagga.start();
			//         });
			/*	     Quagga.init({
			              inputStream : {
			                name : 'image/process.png',
			                type : 'ImageStream',
			                 target: document.querySelector('#myCanvas')
			              },
			              decoder : {
			                readers : ['ean_reader']
			              }
			            }, function(err) {
			                if (err) {
			                
			                     
			                }
			               
			                Quagga.start();                     
			            }); */
			var canvas2 = document.getElementById("myCanvas");
			var dataURL = canvas2.toDataURL();
			var oInput2 = this.getView().byId("__area1");
			var s = canvas2.width + 100;
			Quagga.decodeSingle({
				//  src: "image/process.jpg",
				decoder: {
					readers: [
						"code_128_reader",
						"ean_reader",
						"ean_8_reader",
						"upc_reader",
						"upc_e_reader",
						"code_39_reader",
						"i2of5_reader",
						"code_39_vin_reader",
						"codabar_reader"
					],
					// List of active readers
					multiple: true,
					locate: true
				},
				locator: {
					patchSize: "x-small"

				},
				inputStream: {
					size: 1811
				},

				//	   inputStream: {
				//size: 1800  // restrict input-size to be 800px in width (long-side)
				// },
				//			locator: {
				//				patchSize: "medium",
				//				halfSample: true
				//			},
				//	length: 10,
				//		size: 800,
				//   	length: 10,
				//			size: 800,
				numOfWorkers: 10,
				src: dataURL
			}, function(result) {
				if (result) {
					for (var p in result) {
						// for (var p in o) {
						//   console.log(p+': '+o[p]);
						//	console.log(result[p].codeResult.code);
						oInput2.setValue(oInput2.getValue() + ";" + result[p].codeResult.code);
					}
				} else {
					if (result.codeResult) {
						oInput2.setValue(oInput2.getValue() + ";" + result.codeResult.code);
					} else {
						//				console.log("not detected");
						oInput2.setValue("not detected");
					}
				}
			});
			/*Quagga.init({
			    inputStream : {
			      name : "Live",
			      type : "ImageStream",
			      target:  "#__area1"
			    },
			    decoder : {
			      readers : ["code_128_reader"]
			    }
			  }, function(err) {
			      if (err) {
			          console.log(err);
			          return
			      }
			      console.log("Initialization finished. Ready to start");
			      Quagga.start();
			  });*/
			/*var c=document.getElementById("myCanvas");
			var ctx=c.getContext("2d");
			ctx.beginPath();
			ctx.lineCap="round";
			ctx.moveTo(20,20);
			ctx.lineTo(200,20);
			ctx.stroke();*/
			/*Quagga.decodeSingle({
			   //       readers: ['code_128_reader'],
			  //locate: true, // try to locate the barcode in the image
			  src: 'image/process.png' ,// or 'data:image/jpg;base64,' + data
			    numOfWorkers: 0,
			    inputStream: {
			        size: 800,
			        area: {
			            top: "10%",
			            right: "5%",
			            left: "5%",
			            bottom: "10%"
			        }
			    }
			  
			}, function(result){
			  MessageToast.show(result.codeResult.code);
			}); */
			Quagga.onProcessed(function(result) {
				/*			var drawingCtx = Quagga.canvas.ctx.overlay,
								drawingCanvas = Quagga.canvas.dom.overlay;

							if (result) {
								if (result.boxes) {
									drawingCtx.clearRect(0, 0, parseInt(drawingCanvas.getAttribute("width")), parseInt(drawingCanvas.getAttribute("height")));
									result.boxes.filter(function(box) {
										return box !== result.box;
									}).forEach(function(box) {
										Quagga.ImageDebug.drawPath(box, {
											x: 0,
											y: 1
										}, drawingCtx, {
											color: "green",
											lineWidth: 2
										});
									});
								}

								if (result.box) {
									Quagga.ImageDebug.drawPath(result.box, {
										x: 0,
										y: 1
									}, drawingCtx, {
										color: "#00F",
										lineWidth: 2
									});
								}

								if (result.codeResult && result.codeResult.code) {
									Quagga.ImageDebug.drawPath(result.line, {
										x: 'x',
										y: 'y'
									}, drawingCtx, {
										color: 'red',
										lineWidth: 3
									});
								}
							}*/
				//	var  = Quagga.canvas.ctx.overlay;
				var drawingCtxs = Quagga.canvas.dom.overlay;
				//		var canvas = document.getElementById("myCanvas");
				var drawingCtx = canvas.getContext("2d");
				var linha = result[0].line;
				/*				linha[0].x = linha[0].x - 100;
								linha[0].y = linha[0].y - 50;
							
								linha[1].x = linha[1].x - 100;
								linha[1].y = linha[1].y - 50;*/
				result.forEach(function(r) {
					if (r.line) {
						Quagga.ImageDebug.drawPath(r.line, {
							x: "x",
							y: "y"
						}, drawingCtx, {
							color: "red",
							lineWidth: 1
						});
						Quagga.ImageDebug.drawPath(r.box, {
							x: 0,
							y: 1
						}, drawingCtx, {
							color: "green",
							lineWidth: 1
						});
					}
				});

			});
			Quagga.onDetected(function(result) {
				/*
												var canvas = document.getElementById("myCanvas");

												var drawingCtx = canvas.getContext("2d");
								 
											//	var drawingCanvas = Quagga.canvas.dom.overlay;

										//		drawingCtx.clearRect(0, 0, parseInt(drawingCanvas.getAttribute("width")), parseInt(drawingCanvas.getAttribute("height")));
								 
												Quagga.ImageDebug.drawPath(result[0].line, {
													x: 'x',
													y: 'y'
												}, drawingCtx, {
													color: "red",
													lineWidth: 1
												});

												Quagga.ImageDebug.drawPath(result[0].box, {
													x: 0,
													y: 1
												}, drawingCtx, {
													color: "green",
													lineWidth: 1
												});*/
				/*				var $node,
													canvas = Quagga.canvas.dom.image,
													detectedCode = result.codeResult.code;

												$node = $(
													'<li><div class="thumbnail"><div class="imgWrapper"><img /></div><div class="caption"><h4 class="code"></h4></div></div></li>'
												);
												$node.find("img").attr("src", canvas.toDataURL());
												$node.find("h4.code").html(detectedCode);
												$("#result_strip ul.thumbnails").prepend($node);*/
			});
		},
		/**
		 *@memberOf Milestone_OCR.controller.View1
		 */
		onAfterRendering: function() {
			//This code was generated by the layout editor.
			//		canvas.hidden = "true"; // document.getElementById("scroll").style.overflow = "scroll";

			var form = this.getView().byId(this.createId("page"));
			var MAX = 1;
			for (var i = 0; i < MAX; i++) {
				form.addContent(new sap.m.Label({
					text: "label"
				}));
				form.addContent(new sap.ui.core.HTML({
					content: "<canvas id='myCanvas1' width='200' height='100' style='border:1px solid #000000;'>   </canvas>"
				}));

				form.addContent(new sap.ui.core.HTML({

					content: "<FORM id='my_event_url' method='post' action='SAPEVENT:SUBMIT_FORM_AS_POST_METHOD'>" +
						"<P>First Name <INPUT id=ocr2 TYPE=text NAME=FirstName VALUE=John>" +
						"<P>Last Name <INPUT TYPE=text NAME=LastName VALUE=Smith>" +
						"<P><INPUT  TYPE=submit VALUE='Submit input using POST method'> </FORM>"
				}));

			}
		},
		/**
		 *@memberOf Milestone_OCR.controller.View1
		 */
		Zoomout: function() {
$('#my_event_url').submit();
/*	    $.ajax({
        url: $('#my_event_url').val() ,
        crossDomain: true
    });	*/
			
 
			/*    //Create a panel instance
			var oPanel = new sap.ui.commons.Panel();
			//Add something to the panel's content area

			//Attach the panel to the page
			oPanel.placeAt("content");
			*/
			/*				var img = document.getElementById("__image0");
						var 	wid = img.width;
						var 	ht = img.height;
							img.style.width = (wid * 100) + "px";
							img.style.height = (ht * 100) + "px";
							img.style.marginLeft = -(img.width / 2) + "px";
							img.style.marginTop = -(img.height / 2) + "px";*/
			/*		
					 var oCanvas = document.createElement("__image0");
			                                        // make canvas fit the image
			                                        oCanvas.width = 800;
			                                        oCanvas.height = 600;
			                                        // reduce opacity of context, then applied to the image
			                                        var oContext = oCanvas.getContext("2d");
			                                        oContext.globalAlpha = 0.2;
			                                        oContext.drawImage(this, 0, 0); // paint the image onto the canvas
			                                        // retrieve the manipulated base64-represenation of the image from the canvas
			                                        var sBase64 = oCanvas.toDataURL("image/process.jpg", 1.0); // retrieve as JPG in 100% quality
			                                        // "return" it
			                                        resolve(sBase64);*/
			/*		jQuery(function() {
						jQuery("#__image0").Jcrop({
							trackDocument: false
						});
					});*/
			//This code was generated by the layout editor.
			/*			var x = 10;
						var a = document.getElementById('__image0');
						a.style.height = x + '%';
						a.style.width = x + '%';
						x--;
						// document.body.style.overflow = 'auto';
						if (x > 0) {
							//setTimeout("Zoomout(\"" + x + "\")", 5);

						} else {
							        b = document.getElementById('_enlargediv');
							       c = document.getElementById('_enlargetable');
							       b.parentNode.removeChild(b);
							       c.parentNode.removeChild(c);    
							document.body.style.overflow = 'auto'; */
		},
		/**
		 *@memberOf Milestone_OCR.controller.View1
		 */
		to_gui: function() {
			//This code was generated by the layout editor.

		}
	});
});